labs(x = "Sample size", y = "Gap of entropy")
#ggsave('Fig4.png', width = 10, height = 6, dpi = 300)
data %>%
# data wrangling
group_by(Language,Role,seq,position) %>%
summarize(n = sum(n)) %>%
spread(position,n, fill = 0) %>%
# adding the entropy
mutate(ent = as.numeric(entropy(c(after_verb,before_verb)))) %>%
gather("Method","Entropy",-c(Language,Role,seq,after_verb,before_verb)) %>%
gather("position","n",-c(Language,Role,seq,Entropy,Method)) %>%
# saving the relevant output
filter(Method == "ent") -> output
output %>%
# just extract one value, since they are mirroring each other
filter(position == "after_verb") %>%
# removing not used columns
select(-c(Method, n, position)) %>%
# data wrangling
pivot_wider(names_from = seq, values_from = Entropy) %>%
# setting the threshold
mutate(threshold = `2000`) %>%
# extract the gap
select(Language, Role, threshold, everything()) %>%
mutate_at(vars(`20`:`2000`),funs(. -threshold)) %>%
select(-threshold) %>%
# reshape the data
pivot_longer(names_to = "seq", values_to = "Entropy", -c(Language, Role)) %>%
mutate(Entropy = abs(Entropy), seq = as.numeric(seq)) %>%
ungroup() %>%
# change label names
mutate(Role = case_when(Role == "sub" ~ "S & V",
Role == "obj" ~ "O & V")) %>%
mutate(Role = factor(Role, levels = c("S & V","O & V"))) %>%
# make the plot
ggplot(aes(x = seq, y = Entropy, group = c(seq))) +
geom_boxplot() +
facet_grid(~Role) +
# visual settings
scale_x_continuous(breaks = seq(0, 2000, by = 200)) +
ylim(0,0.25) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title = element_text(size =12),
strip.text.x = element_text(size =12)) +
labs(x = "Sample size", y = "Gap of entropy")
#ggsave('Fig4.png', width = 10, height = 6, dpi = 300)
data %>%
# data wrangling
group_by(Language,Role,seq,position) %>%
summarize(n = sum(n)) %>%
spread(position,n, fill = 0) %>%
# adding the entropy
mutate(ent = as.numeric(entropy(c(after_verb,before_verb)))) %>%
gather("Method","Entropy",-c(Language,Role,seq,after_verb,before_verb)) %>%
gather("position","n",-c(Language,Role,seq,Entropy,Method)) %>%
# saving the relevant output
filter(Method == "ent") -> output
output %>%
# just extract one value, since they are mirroring each other
filter(position == "after_verb") %>%
# removing not used columns
select(-c(Method, n, position)) %>%
# data wrangling
pivot_wider(names_from = seq, values_from = Entropy) %>%
# setting the threshold
mutate(threshold = `2000`) %>%
# extract the gap
select(Language, Role, threshold, everything()) %>%
mutate_at(vars(`20`:`2000`),funs(. -threshold)) %>%
select(-threshold) %>%
# reshape the data
pivot_longer(names_to = "seq", values_to = "Entropy", -c(Language, Role)) %>%
mutate(Entropy = abs(Entropy), seq = as.numeric(seq)) %>%
ungroup() %>%
# change label names
mutate(Role = case_when(Role == "nsubj" ~ "S & V",
Role == "obj" ~ "O & V")) %>%
mutate(Role = factor(Role, levels = c("S & V","O & V"))) %>%
# make the plot
ggplot(aes(x = seq, y = Entropy, group = c(seq))) +
geom_boxplot() +
facet_grid(~Role) +
# visual settings
scale_x_continuous(breaks = seq(0, 2000, by = 200)) +
ylim(0,0.25) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title = element_text(size =12),
strip.text.x = element_text(size =12)) +
labs(x = "Sample size", y = "Gap of entropy")
#ggsave('Fig4.png', width = 10, height = 6, dpi = 300)
View(df)
limits <- seq(20, 2000, 20)
suffix <- "trans"
csvs <- dir_ls('/Users/amanda/phd/art2/output/multi_tree/', recurse = TRUE, regexp = "(sub|obj)_trans.csv$")
df <- csvs %>% map_dfr(read_csv, .id = 'file', show_col_types = FALSE) %>%
filter(
grepl("Tr", head_feats)
!grepl("Q", head_feats),
limits <- seq(20, 2000, 20)
suffix <- "trans"
csvs <- dir_ls('/Users/amanda/phd/art2/output/multi_tree/', recurse = TRUE, regexp = "(sub|obj)_trans.csv$")
df <- csvs %>% map_dfr(read_csv, .id = 'file', show_col_types = FALSE) %>%
filter(
grepl("Tr", head_feats),
!grepl("Q", head_feats),
grepl("NOUN|PROPN", dep_feats)
)
df$Language <- substring(basename(df$file),0,2)
df$Role <- substring(basename(df$file),7,9)
df_long <- df %>%
rename(c("before_verb" = "n_dephead", "after_verb" = "n_headdep")) %>%
pivot_longer(cols = c(before_verb, after_verb),
names_to = "position",
values_to = "count")
# sampled <- map_dfr(limits, function(limit) {
#   df_long %>%
#   slice_sample(n=limit, weight_by=count, replace=TRUE) %>%
#   select(position) %>%
#   count(vars=position) %>%
#   mutate(Language = "en") %>%
#   mutate(seq = limit) %>%
#   mutate(Role = "nsubj") %>%
#   mutate(ratio = n/seq) %>%
#   rename(position=vars)
# })
sampled <- df_long %>%
group_by(Language, Role) %>%
group_split() %>%
map_dfr(function(df_lang) {
lang <- unique(df_lang$Language)
role <- unique(df_lang$Role)
map_dfr(limits, function(limit) {
df_lang %>%
slice_sample(n=limit, weight_by=count, replace=TRUE) %>%
select(position) %>%
count(vars=position) %>%
mutate(Language = lang) %>%
mutate(seq = limit) %>%
mutate(Role = role) %>%
mutate(ratio = n/seq) %>%
rename(position=vars)
})
})
sampled %>%
# data wrangling
group_by(Language,Role,seq,position) %>%
summarize(n = sum(n)) %>%
spread(position,n, fill = 0) %>%
# adding the entropy
mutate(ent = as.numeric(entropy(c(after_verb,before_verb)))) %>%
gather("Method","Entropy",-c(Language,Role,seq,after_verb,before_verb)) %>%
gather("position","n",-c(Language,Role,seq,Entropy,Method)) %>%
# saving the relevant output
filter(Method == "ent") -> output
# cleaning the data and plotting
output %>%
# change labels of subject and object
mutate(Role = case_when(Role == "sub" ~ "S & V",
Role == "obj" ~ "O & V")) %>%
mutate(Role = factor(Role, levels = c("S & V","O & V"))) %>%
# make the plot
filter(Language %in% c("en", "de", "fr")) %>%
ggplot(aes(x=seq,y=Entropy,color=Language)) +
geom_line() +
ylim(0,1) +
facet_wrap(~Role) +
theme_bw() +
# plot visual settings
theme(strip.text.x = element_text(size =16),
axis.text = element_text(size =12),
axis.title = element_text(size = 14),
legend.text = element_text(size =14),
legend.position = "right",
legend.title = element_blank()) +
xlab("Sample size")
#ggsave('ENT_line_sample.png', width = 10, height = 6, dpi = 300)
gridplot <- ggarrange(plotlist = plots, ncol = col, nrow = row) +
ggtitle(titel) +
theme(
plot.title = element_text(
face = "bold",
size = s_title,
hjust = 0.5)
)
library(tidyverse)
library(ggpubr)
options(OutDec= ",")
datafil <- "verbpernivå_nivå.csv"
titel <- "Andel verb per Bloomnivå"
format <- "ruta"
if (format == "platt") {
col <- 4
row <- 1
w <- 40
h <- 15
s_title <- 25
s_subtitle <- 20
s_caption <- 18
h_caption <- 0.98
v_caption <- 12
s_label <- 7
s_annot <- 7
} else if (format == "ruta") {
col <- 2
row <- 2
w <- 40
h <- 30
s_title <- 35
s_subtitle <- 30
s_caption <- 26
s_label <- 10
h_caption <- 0.9
v_caption <- 8
s_annot <- 10
}
df <- read.csv(file.path("data_2025_mar", datafil), sep=";")
get.wd
getwd()
setwd("/Users/amanda/git/kursplansanalys/Visualiseringar/")
library(tidyverse)
library(ggpubr)
options(OutDec= ",")
datafil <- "verbpernivå_nivå.csv"
titel <- "Andel verb per Bloomnivå"
format <- "ruta"
if (format == "platt") {
col <- 4
row <- 1
w <- 40
h <- 15
s_title <- 25
s_subtitle <- 20
s_caption <- 18
h_caption <- 0.98
v_caption <- 12
s_label <- 7
s_annot <- 7
} else if (format == "ruta") {
col <- 2
row <- 2
w <- 40
h <- 30
s_title <- 35
s_subtitle <- 30
s_caption <- 26
s_label <- 10
h_caption <- 0.9
v_caption <- 8
s_annot <- 10
}
df <- read.csv(file.path("data_2025_mar", datafil), sep=";")
df_t <- df %>%
pivot_longer(cols = 2:7, names_to = "level", values_to = "counts") %>%
group_by(Grupp) %>%
mutate(perc=counts/sum(counts)) %>%
mutate(perc.h = perc/2) %>%
mutate(perc.h.n = -perc.h)
df_split <- split(df_t, factor(df_t$Grupp, unique(df_t$Grupp)))
plots = list()
for (i in names(df_split)) {
plot <- ggplot(df_split[[i]],
aes(
y = row.names(df_split[[i]]),
fill=row.names(df_split[[i]])
)) +
xlim(-0.18, 0.18) +
geom_bar(aes(x = perc.h), stat = "identity") +
geom_bar(aes(x = perc.h.n), stat = "identity") +
geom_hline(yintercept = df$Snitt[df$Grupp==i]+0.5, color = "gray", size = 1, linetype="dashed") +
annotate("text", x = 0.14, y = df$Snitt[df$Grupp==i]+0.65, label = df$Snitt[df$Grupp==i], vjust = 0, hjust = 0, size = s_annot) +
geom_text(aes(
x = 0,
label = scales::percent(round(perc, 3), decimal.mark = ",", accuracy = 0.1)),
size = s_label
) +
labs(
title=i,
caption=paste("Snittnivå",df$Snitt[df$Grupp==i])
) +
theme_void() +
scale_fill_manual(
values = c(
"#a283c4",
"#7b9de6",
"#99deec",
"#93d981",
"#f8e26e",
"#f68e70")
) +
theme(
legend.position = "none",
plot.title = element_text(
face = "bold",
size = s_subtitle,
hjust = 0.5),
plot.caption=element_blank(),
# plot.caption = element_text(
#     face = "italic",
#     size = s_caption,
#     hjust = h_caption,
#     vjust = v_caption
#     ),
plot.margin = unit(c(2,0,0,0), 'lines'))
plots <- append(plots, list(plot))
}
gridplot <- ggarrange(plotlist = plots, ncol = col, nrow = row) +
ggtitle(titel) +
theme(
plot.title = element_text(
face = "bold",
size = s_title,
hjust = 0.5)
)
#utdata <- file.path("figurer_2025_mar", paste(substring(datafil, 1, nchar(datafil) - 4), ".png", sep=""))
#ggsave(utdata, plot = gridplot, width = w, height = h, units = "cm")
View(df_split)
library(tidyverse)
library(ggpubr)
options(OutDec= ",")
datafil <- "verbpernivå_alla.csv"
titel <- "Andel verb per Bloomnivå"
format <- "ruta"
if (format == "platt") {
col <- 4
row <- 1
w <- 40
h <- 15
s_title <- 25
s_subtitle <- 20
s_caption <- 18
h_caption <- 0.98
v_caption <- 12
s_label <- 7
s_annot <- 7
} else if (format == "ruta") {
col <- 2
row <- 2
w <- 40
h <- 30
s_title <- 35
s_subtitle <- 30
s_caption <- 26
s_label <- 10
h_caption <- 0.9
v_caption <- 8
s_annot <- 10
}
df <- read.csv(file.path("data_2025_mar", datafil), sep=";")
df_t <- df %>%
pivot_longer(cols = 2:7, names_to = "level", values_to = "counts") %>%
group_by(Grupp) %>%
mutate(perc=counts/sum(counts)) %>%
mutate(perc.h = perc/2) %>%
mutate(perc.h.n = -perc.h)
df_split <- split(df_t, factor(df_t$Grupp, unique(df_t$Grupp)))
plots = list()
for (i in names(df_split)) {
plot <- ggplot(df_split[[i]],
aes(
y = row.names(df_split[[i]]),
fill=row.names(df_split[[i]])
)) +
xlim(-0.18, 0.18) +
geom_bar(aes(x = perc.h), stat = "identity") +
geom_bar(aes(x = perc.h.n), stat = "identity") +
geom_hline(yintercept = df$Snitt[df$Grupp==i]+0.5, color = "gray", size = 1, linetype="dashed") +
annotate("text", x = 0.14, y = df$Snitt[df$Grupp==i]+0.65, label = df$Snitt[df$Grupp==i], vjust = 0, hjust = 0, size = s_annot) +
geom_text(aes(
x = 0,
label = scales::percent(round(perc, 3), decimal.mark = ",", accuracy = 0.1)),
size = s_label
) +
labs(
title=i,
caption=paste("Snittnivå",df$Snitt[df$Grupp==i])
) +
theme_void() +
scale_fill_manual(
values = c(
"#a283c4",
"#7b9de6",
"#99deec",
"#93d981",
"#f8e26e",
"#f68e70")
) +
theme(
legend.position = "none",
plot.title = element_text(
face = "bold",
size = s_subtitle,
hjust = 0.5),
plot.caption=element_blank(),
# plot.caption = element_text(
#     face = "italic",
#     size = s_caption,
#     hjust = h_caption,
#     vjust = v_caption
#     ),
plot.margin = unit(c(2,0,0,0), 'lines'))
plots <- append(plots, list(plot))
}
gridplot <- ggarrange(plotlist = plots, ncol = col, nrow = row) +
ggtitle(titel) +
theme(
plot.title = element_text(
face = "bold",
size = s_title,
hjust = 0.5)
)
#utdata <- file.path("figurer_2025_mar", paste(substring(datafil, 1, nchar(datafil) - 4), ".png", sep=""))
#ggsave(utdata, plot = gridplot, width = w, height = h, units = "cm")
plot
library(tidyverse)
library(ggpubr)
options(OutDec= ",")
datafil <- "verbpernivå_alla.csv"
titel <- "Andel verb per Bloomnivå"
format <- "ruta"
if (format == "platt") {
col <- 4
row <- 1
w <- 40
h <- 15
s_title <- 25
s_subtitle <- 20
s_caption <- 18
h_caption <- 0.98
v_caption <- 12
s_label <- 7
s_annot <- 7
} else if (format == "ruta") {
col <- 2
row <- 2
w <- 40
h <- 30
s_title <- 35
s_subtitle <- 30
s_caption <- 26
s_label <- 10
h_caption <- 0.9
v_caption <- 8
s_annot <- 10
}
df <- read.csv(file.path("data_2025_mar", datafil), sep=";")
df_t <- df %>%
pivot_longer(cols = 2:7, names_to = "level", values_to = "counts") %>%
group_by(Grupp) %>%
mutate(perc=counts/sum(counts)) %>%
mutate(perc.h = perc/2) %>%
mutate(perc.h.n = -perc.h)
df_split <- split(df_t, factor(df_t$Grupp, unique(df_t$Grupp)))
plots = list()
for (i in names(df_split)) {
plot <- ggplot(df_split[[i]],
aes(
y = row.names(df_split[[i]]),
fill=row.names(df_split[[i]])
)) +
xlim(-0.18, 0.18) +
geom_bar(aes(x = perc.h), stat = "identity") +
geom_bar(aes(x = perc.h.n), stat = "identity") +
geom_hline(yintercept = df$Snitt[df$Grupp==i]+0.5, color = "gray", size = 1, linetype="dashed") +
annotate("text", x = 0.14, y = df$Snitt[df$Grupp==i]+0.65, label = df$Snitt[df$Grupp==i], vjust = 0, hjust = 0, size = s_annot) +
geom_text(aes(
x = 0,
label = scales::percent(round(perc, 3), decimal.mark = ",", accuracy = 0.1)),
size = s_label
) +
labs(
title=i,
caption=paste("Snittnivå",df$Snitt[df$Grupp==i])
) +
theme_void() +
scale_fill_manual(
values = c(
"#a283c4",
"#7b9de6",
"#99deec",
"#93d981",
"#f8e26e",
"#f68e70")
) +
theme(
legend.position = "none",
plot.title = element_text(
face = "bold",
size = s_subtitle,
hjust = 0.5),
plot.caption=element_blank(),
# plot.caption = element_text(
#     face = "italic",
#     size = s_caption,
#     hjust = h_caption,
#     vjust = v_caption
#     ),
plot.margin = unit(c(2,0,0,0), 'lines'))
plots <- append(plots, list(plot))
}
gridplot <- ggarrange(plotlist = plots, ncol = col, nrow = row) +
ggtitle(titel) +
theme(
plot.title = element_text(
face = "bold",
size = s_title,
hjust = 0.5)
)
#utdata <- file.path("figurer_2025_mar", paste(substring(datafil, 1, nchar(datafil) - 4), ".png", sep=""))
#ggsave(utdata, plot = gridplot, width = w, height = h, units = "cm")
plot
